Block Formatting Context Notes:

MDN Docs
  - Resource: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context

Block formatting contexts are important for the positioning and clearing of floats.

If you have a containing element, and then an element inside that container and you float it, it can extend beyond to borders of the containing element because it has been taken out of the flow (see this article: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/In_Flow_and_Out_of_Flow).

If you want to contain the floated element with it's parent container, you will need to create a new block formatting context by using overflow: auto, or, a better way, using display: flow-root.

Using overflow: auto is problematic though, as it is supposed to be used to tell the browser how to deal with overflowing content, NOT to soley create a new block formatting context (although it also creates a new BFC).

When using display: flow-root, you are telling the element that you use it on that everything inside of that container participates in the block formatting context of that container, which is what you really want to do to contain a floated element. See the article on Flow Layout above to learn how this works better.

How does flow work?

  - Resource: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/In_Flow_and_Out_of_Flow

  - Resource: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Block_and_Inline_Layout_in_Normal_Flow

This guide explains how block and inline elements behave when they are part of the normal flow. Normal flow states that any boxes must be part of a formatting context, which can be block or inline, but not both at once. Block level boxes participate in a block formatting context while inline-level boxes participate in an inline formatting context.

In block formatting context, boxes are laid out one after the other vertically starting at the top of the containg block. The vertical distance between two adjacent (sibling) boxes is determined by the margin property, and these vertical margins can collapse.

In and inline formatting context, boxes are laid out one after the other horizontally.

In a block formatting context, the vertical margins between adjacent elements will collapse. If the top element has a bottom margin applied, and the bottom element has a top margin applied, the margin between the two will not be the sum of the two margins but rather the larger of the two. So, if box A sits on top of box B, and box A has a bottom margin of 20px and box B has a top margin of 40px, the margin between the two boxes will be 40px.

Inline elements participate in an inline formatting context. They display one after the other in the direction that sentences run in the writing mode, so in English they display to the right of each other. Inline elements have a box, just like block level elements. The lines created by inline boxes are known as line boxes. The height of a line box is determined by the largest element in the line box.

In addition to the two formatting contexts that occur normally, inline and block, the display property allows you to create new formatting contexts for an element and it's direct children. Each element has an outer and an inner display type. In the case of an element set with the display: flex, the outer display type will behave like a block level element, and the inner display type will be flex for all direct children. Any grandchildren will revert to normal flow formatting contexts. Think of every CSS box as having an outer display type, which controls how it interacts with other boxes, and an inner display type, which controls how the boxes within it interact.

In Flow and Out of Flow:

  - Resource: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/In_Flow_and_Out_of_Flow

Elements of a page can be said to be in flow if they appear on the page in the same order that they do in the source code, and behave according to their formatting contexts (block or inline).

All elements are in flow except:
  * floated elements
  * elements with position: absolute or position: fixed
  * the root <html> element

Out of flow items create a new block formatting context, so everything inside them can be seen as a mini layout, separate from the rest of the page. The root <html> element is out of flow because it is the container for everything in the document, and therefore creates it's own block formatting context.

When you float an item, you remove it from the formatting context it is in, and it is out of flow. To make space around floated items, you have to add margin to the floated item, so that it will push elements in the normal flow away from it. If you try to use margin and padding on the in-flow items to get some distance from a floated item, you won't be succsseful.